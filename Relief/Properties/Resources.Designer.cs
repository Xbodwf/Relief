//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Relief.Properties {
    using System;
    
    
    /// <summary>
    ///   一个强类型的资源类，用于查找本地化的字符串等。
    /// </summary>
    // 此类是由 StronglyTypedResourceBuilder
    // 类通过类似于 ResGen 或 Visual Studio 的工具自动生成的。
    // 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 ResGen
    // (以 /str 作为命令选项)，或重新生成 VS 项目。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   返回此类使用的缓存的 ResourceManager 实例。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Relief.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   重写当前线程的 CurrentUICulture 属性，对
        ///   使用此强类型资源类的所有资源查找执行重写。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   查找类似 /* esm.sh - react@19.1.1 */
        ///var x=Object.create;var C=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var k=Object.getPrototypeOf,q=Object.prototype.hasOwnProperty;var S=(e,t)=&gt;()=&gt;(t||e((t={exports:{}}).exports,t),t.exports);var z=(e,t,n,r)=&gt;{if(t&amp;&amp;typeof t==&quot;object&quot;||typeof t==&quot;function&quot;)for(let u of b(t))!q.call(e,u)&amp;&amp;u!==n&amp;&amp;C(e,u,{get:()=&gt;t[u],enumerable:!(r=D(t,u))||r.enumerable});return e};var G=(e,t,n)=&gt;(n=e!=null?x(k(e)):{},z(t||!e||!e.__esModule?C(n,&quot;def [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string react {
            get {
                return ResourceManager.GetString("react", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 import * as React from &apos;react&apos;;
        ///
        ///const ReactUnity = {
        ///    // Unity场景根节点
        ///    _root: null,
        ///    _container: null,
        ///    _fiberRoot: null,
        ///
        ///    createRoot(container) {
        ///        if (this._root) {
        ///            throw new Error(&apos;只能创建一个Root实例&apos;);
        ///        }
        ///
        ///        // 创建根GameObject
        ///        this._container = new UnityEngine.GameObject(&apos;ReactRoot&apos;);
        ///        UnityEngine.Object.DontDestroyOnLoad(this._container);
        ///
        ///        this._root = {
        ///            render: (element) =&gt; {
        ///                this._render(elemen [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string react_unity {
            get {
                return ResourceManager.GetString("react_unity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 const UnityComponents = {
        ///    // 基础组件工厂
        ///    createComponent(type, props) {
        ///        return {
        ///            $$typeof: Symbol.for(&apos;react.element&apos;),
        ///            type,
        ///            props: props || {},
        ///            key: props?.key || null
        ///        };
        ///    },
        ///
        ///    // GameObject 基础组件
        ///    GameObject(props) {
        ///        const go = new UnityEngine.GameObject(props.name || &apos;GameObject&apos;);
        ///        
        ///        // 应用变换
        ///        if (props.position) {
        ///            go.transform.position = new UnityEngine.Vector3(
        ///         [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string reactComponents {
            get {
                return ResourceManager.GetString("reactComponents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   查找类似 /*! *****************************************************************************
        ///Copyright (c) Microsoft Corporation. All rights reserved.
        ///Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use
        ///this file except in compliance with the License. You may obtain a copy of the
        ///License at http://www.apache.org/licenses/LICENSE-2.0
        ///
        ///THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
        ///KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
        ///WA [字符串的其余部分被截断]&quot;; 的本地化字符串。
        /// </summary>
        internal static string tsc {
            get {
                return ResourceManager.GetString("tsc", resourceCulture);
            }
        }
    }
}
